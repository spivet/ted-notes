import{_ as a,c as r,a as s,w as c,b as t,d as o,r as n,o as p}from"./app.4a14ac2b.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"elementary/001.md"}'),d={name:"elementary/001.md"},l=t("hr",null,null,-1),v=t("source",{src:"http://trackmedia-30106.sz.gfp.tencent-cloud.com/long/M500002DzvPu08Kb3l.mp3?sign=q-sign-algorithm%3Dsha1%26q-ak%3D4fHArEE8trlnFFvFWyWaemhO%26q-sign-time%3D1670235908%3B1670840708%26q-key-time%3D1670235908%3B1670840708%26q-header-list%3Dhost%26q-url-param-list%3D%26q-signature%3D174b5cb0e69076d7a30e013c6b35f179e093fd78",type:"audio/mpeg"},null,-1),h=t("source",{src:"https://res.wx.qq.com/voice/getvoice?mediaid=MzIyNDQzMDQ5M18xMDAwMDAyMzg=",type:"audio/mpeg"},null,-1),u=o('<p>Bad news: your worst enemies are at the <strong>gate</strong>.</p><div class="cn-transcript"> 坏消息：你最大的敌人 已经兵临城下。 </div><p>For your <strong>fledgling</strong> kingdom guards the world’s only herd of <strong>tiny</strong> <strong>dino creatures</strong>.</p><div class="cn-transcript"> 你新生的王国守护着世界上 唯一一群小恐龙。 </div><p>To you, they’re <strong>sacred</strong>.</p><div class="cn-transcript"> 它们对你来说是无价之宝， </div><p>To everyone else, they’re food.</p><div class="cn-transcript"> 对别人来说，它们只是食物而已。 </div><p>The three closest <strong>nation-states</strong> have all <strong>teamed up</strong></p><div class="cn-transcript"> 三个最接近的王国已经联合起来 </div><p>in what they call an <strong>alliance</strong> of the hungry</p><div class="cn-transcript"> 组成了一个饥饿联盟， </div><p>to <strong>smash</strong> open your walls and <strong>devour</strong> the <strong>herd</strong>.</p><div class="cn-transcript"> 他们准备砸开你的城墙， 吃掉你的一群小恐龙。 </div><p>Your <strong>fortifications</strong> will <strong>hold off</strong> their armies for now.</p><div class="cn-transcript"> 你的防御城墙现在还能抵抗得住， </div><p>But when their <strong>siege</strong> weapons arrive tomorrow,</p><div class="cn-transcript"> 但明天他们的攻城武器到来时， </div><p>you won’t stand a chance.</p><div class="cn-transcript"> 你就没有赢的机会了。 </div><p>Luckily, you have a wall <strong>fabricator</strong>:</p><div class="cn-transcript"> 幸运的是，你有一台城墙制造器。 </div><p>if you run it all night,</p><div class="cn-transcript"> 如果它一晚上不停地运作， </div><p>you may be able to <strong>reinforce</strong> your border before the weapons arrive.</p><div class="cn-transcript"> 你可以在你的敌人到达之前加固你的城墙。 </div><p>However, it can only create wall <strong>segments</strong> of a specific, whole number size</p><div class="cn-transcript"> 不过，它只能制造出特定和整数尺寸的墙体。 </div><p>that you must determine ahead of time.</p><div class="cn-transcript"> 你必须在制造之前 决定好墙体的尺寸。 </div><p>Your engineers have been in close <strong>consultation</strong> with your spymaster.</p><div class="cn-transcript"> 你的工程师和间谍专家进行了密切的讨论。 </div><p>Each <strong>rival</strong> kingdom has <strong>wall-busters</strong> that come in one specific size.</p><div class="cn-transcript"> 每个竞争王国都有一个特定尺寸的破墙器。 </div><p>The clowns’ are all 6 meters,</p><div class="cn-transcript"> 小丑王国可以攻破 6 米城墙， </div><p>the royals’ are 9, and the redheads’ are 20.</p><div class="cn-transcript"> 皇室王国可以攻破 9 米城墙， 红发王国攻破 20 米城墙。 </div><p>Each wall-buster can level a wall segment of the matching size.</p><div class="cn-transcript"> 每个破墙器可以攻破相对尺寸的城墙。 </div><p>And they can be combined as well;</p><div class="cn-transcript"> 破墙器同时还可以组合使用， </div><p>two 6′s can take out a 12 meter wall</p><div class="cn-transcript"> 两个 6 米的破墙器可以 攻破 12 米的城墙， </div><p>and a 6 and a 9 could break one that’s 15 meters.</p><div class="cn-transcript"> 一个 6 米和一个 9 米可以攻破 15 米的城墙， </div><p>But a 7 meter wall would hold fast against any of them.</p><div class="cn-transcript"> 但一个 7 米的城墙不会被攻破。 </div><p>Meanwhile, large walls aren&#39;t necessarily protected.</p><div class="cn-transcript"> 同时，大城墙不一定就是安全的。 </div><p>Here’s how they could take down 70, 71, and 72 meters.</p><div class="cn-transcript"> 这是它们如何可以攻破 70、 71 和 72 米的城墙。 </div><p>Your fabricator takes the same amount of time to produce a wall segment</p><div class="cn-transcript"> 你的城墙制造器制造的时间都是一样的。 </div><p>no matter its length,</p><div class="cn-transcript"> 不论城墙的长度， </div><p>and it’s not particularly fast.</p><div class="cn-transcript"> 但制造的速度不快。 </div><p>So to finish the wall in time,</p><div class="cn-transcript"> 所以要抓紧时间。 </div><p>you need the longest segment that can’t be destroyed by any combination of the siege weapons,</p><div class="cn-transcript"> 你要制造出不会被任何尺寸组合的破墙器摧毁的最长城墙， </div><p>which your enemies have hundreds of.</p><div class="cn-transcript"> 你的敌人有上百个这样的武器。 </div><p>What wall length will save your kingdom?</p><div class="cn-transcript"> 什么长度的城墙能拯救你的王国？ </div><p>Pause here to figure it out yourself. Answer in 3</p><div class="cn-transcript"> 在这里暂停一下，想想看。 答案在 3 秒后出现 </div><p>Answer in 2</p><div class="cn-transcript"> 答案在 2 秒后出现 </div><p>Answer in 1</p><div class="cn-transcript"> 答案在 1 秒后出现 </div><p>It&#39;s possible to solve this problem by <strong>trial</strong> and error.</p><div class="cn-transcript"> 你可以通过不停地试错来找出答案， </div><p>But there’s also a <strong>remarkably</strong> quick and elegant solution</p><div class="cn-transcript"> 但有一个快速并优美的解决方法。 </div><p>inspired by an idea that’s thousands of years old:</p><div class="cn-transcript"> 这个方法是由一个数百年前的思想所启发的： </div><p>the sieve of Eratosthenes.</p><div class="cn-transcript"> 埃拉托斯特尼筛法（Sieve of Eratosthenes） </div><p>Eratosthenes of Cyrene was a 3rd century BCE mathematician from <strong>ancient</strong> Greece</p><div class="cn-transcript"> 塞雷纳的埃拉托塞尼斯是公元前 3 世纪的古希腊数学家， </div><p>interested in prime numbers,</p><div class="cn-transcript"> 他对质数有强烈的兴趣。 </div><p>that is numbers only divisible by 1 and themselves.</p><div class="cn-transcript"> 质数是指只能被 1 和自己整除的数字。 </div><p><strong>Presumably</strong> he grew bored of manually checking whether a given number was prime,</p><div class="cn-transcript"> 他对手动检查一个个数字是否为质数而感到厌烦， </div><p>so he came up with the following technique.</p><div class="cn-transcript"> 所以他创造出了一个技巧。 </div><p>Make a giant list of numbers.</p><div class="cn-transcript"> 先列出一个巨大的数字表， </div><p>Xout all of the multiples of 2, except 2 itself.</p><div class="cn-transcript"> 删掉除 2 以外， 所有 2 的倍数。 </div><p>Now do the same with multiples of 3.</p><div class="cn-transcript"> 现在对 3 的倍数做同样的事。 </div><p>The even multiples have already been eliminated,</p><div class="cn-transcript"> 偶数的倍数已经被除掉了， </div><p>and the odd multiples can all be found in this column.</p><div class="cn-transcript"> 所有奇数的倍数都在这列里。 </div><p>4 was already accounted for when you did multiples of 2,</p><div class="cn-transcript"> 4 已经在删除 2 的倍数时被除掉了。 </div><p>so move on to 5.</p><div class="cn-transcript"> 所以直接跳到 5 。 </div><p>The multiples of 5 and 7 show up <strong>conveniently</strong> in <strong>diagonals</strong>.</p><div class="cn-transcript"> 5 和 7 的倍数巧妙的出现在对角线上。 </div><p>This method eliminates all possible composite numbers,</p><div class="cn-transcript"> 这个技巧排除了所有可能的复合数， </div><p>leaving only primes behind.</p><div class="cn-transcript"> 我们可以轻松地找到越来越大的质数。 </div><p>We&#39;ve already identified every prime less than 121,</p><div class="cn-transcript"> 我们已经找出了所有 小于 121 的质数， </div><p>and it’s easy to go higher and higher this way.</p><div class="cn-transcript"> 我们可以轻松地找到越来越大的质数。 </div><p>We can use a similar technique with our wall problem</p><div class="cn-transcript"> 我们可以用同样的技巧来解决城墙的问题 </div><p>to eliminate entire groups of numbers at once.</p><div class="cn-transcript"> 去一次性排除一整列的数字。 </div><p>A first, critical step is to be <strong>deliberate</strong> about the number of columns.</p><div class="cn-transcript"> 首先，关键一步就是要认真考虑需要多少列的数字。 </div><p>If we use 6 again, the numbers in each column will be exactly 6 apart.</p><div class="cn-transcript"> 如果我们再一次使用 6 列， 每一列的数字都间隔 6 个。 </div><p>What that means is that if we identify a number <strong>vulnerable</strong> to the wall-busters,</p><div class="cn-transcript"> 这代表如果我们找到了 一个会被攻破的数字， </div><p>then all the rest of the column below it would also fall.</p><div class="cn-transcript"> 这列剩下的数字也同样会被攻破。 </div><p>In other words, because your enemies can make 9,</p><div class="cn-transcript"> 换句话说，你的敌人 可以攻破 9 米， </div><p>they can make 15, 21, 27, and so on</p><div class="cn-transcript"> 它也同时也可以攻破 15、 21、27，等等， </div><p>by adding the clowns’ 6-meter machines.</p><div class="cn-transcript"> 加上小丑王国的 6 米破墙器。 </div><p>So right away this eliminates 6, 9 and 20, and everything under them.</p><div class="cn-transcript"> 可以排除 6、9 和 20 ， 以及这列剩下的数字。 </div><p>We’ve accounted for the 6′s with the columns,</p><div class="cn-transcript"> 我们排除了所有 6 的倍数， </div><p>so we can focus on combinations of 20′s and 9′s to eliminate more options.</p><div class="cn-transcript"> 找到 20 和 9 的组合 来排除剩下的数字。 </div><p>Your rivals can easily make 20 plus 9 and 20 plus 20 and everything below.</p><div class="cn-transcript"> 你的敌人可以组合 20 加 9 和 20 加 20， </div><p>Using this approach, we could have eliminated the 70, 71, and 72,</p><div class="cn-transcript"> 使用这个方法，我们可以排除 70、71 和 72， </div><p>and infinitely many other options without having to do any calculations.</p><div class="cn-transcript"> 不需要做任何计算 来排除无数个其他可能。 </div><p>In the remaining column there are no multiples of 9 or 20,</p><div class="cn-transcript"> 剩下一列的数字没有 9 和 20 的倍数， </div><p>but 49 jumps out, as 2 times 20 plus 9.</p><div class="cn-transcript"> 但是 49 是由 2 乘 20 加 9 得出的。 </div><p>There&#39;s no way to make 43,</p><div class="cn-transcript"> 我们没有办法得出 43， </div><p>so that must be the largest wall segment that your enemies can’t destroy.</p><div class="cn-transcript"> 所以这是不会被你的敌人 摧毁的最长城墙。 </div><p>And there you have it.</p><div class="cn-transcript"> 你终于有了这个数字。 </div><p>You plug 43 into the wall fabricator, and after a tense night,</p><div class="cn-transcript"> 你设置城墙制造器来制造 43 米的城墙, 经过紧张的一晚, </div><p>the sun rises on your now <strong>impregnable</strong> fortress</p><div class="cn-transcript"> 太阳照射在你铜墙铁壁般的城墙。 </div><p>and a herd that won’t become unhappy meals.</p><div class="cn-transcript"> 你的小恐龙们不会变成别人的盘中餐。 </div>',160);function m(g,y,w,f,b,_){const e=n("note-title"),i=n("note-media");return p(),r("div",null,[s(e,{title:"Can you solve the fortress riddle?",author:"Henri Picciotto",time:"2022-10-22 Wed"}),l,s(i,null,{default:c(()=>[v,h]),_:1}),u])}const T=a(d,[["render",m]]);export{D as __pageData,T as default};
